
# # du_X_Y.py
# # Nepovinn√© √∫koly

# viƒçen√≠ 4.1: Kvadratick√° rovnice
# V t√©to uk√°zce si nap√≠≈°eme program pro ≈ôe≈°en√≠ kvadratick√© rovnice. Obecnƒõ m√°me
# kvadratickou rovnici definovanou takto:
# ùëéùë•2 + ùëèùë• + ùëê = 0
# Kvadratick√° rovnice m≈Ø≈æe m√≠t v oboru re√°ln√Ωch ƒç√≠sel dva, jeden nebo ≈æ√°dn√© ko≈ôeny.
# Poƒçet ko≈ôen≈Ø m≈Ø≈æeme urƒçit podle hodnoty diskriminantu ùê∑:
# ùê∑ = ùëè2 ‚àí 4ùëéùëê
# Pokud je ùê∑ kladn√©, rovnice m√° dva ko≈ôeny ùë•1
# , ùë•2
# . Ty spoƒç√≠t√°me podle vzorc≈Ø:
# ùë•1 =
# ‚àíùëè ‚àí ‚àö
# ùê∑
# 2ùëé
#  ùë•2 =
# ‚àíùëè + ‚àö
# ùê∑
# 2ùëé
# Kdy≈æ je ùê∑ rovno nule, rovnice m√° pouze jeden ko≈ôen ùë•, kter√Ω je:
# ùë• =
# ‚àíùëè
# 2ùëé
# Kdy≈æ je ùê∑ z√°porn√©, rovnice nem√° ≈æ√°dn√© ko≈ôeny.
# √ökol:
# Ze vstupu naƒçtƒõte koeficienty kvadratick√© rovnice ùëé, ùëè, ùëê. Rovnici vy≈ôe≈°te a jej√≠ ko≈ôeny
# vypi≈°te na v√Ωstup.
# Vypisujte s p≈ôesnost√≠ na dvƒõ desetinn√° m√≠sta. Kdy≈æ budou ko≈ôeny dva, vypi≈°te men≈°√≠,
# # pak vƒõt≈°√≠. Kdy≈æ nebude ≈æ√°dn√Ω ko≈ôen, vypi≈°te No solution

from math import sqrt

# Z√≠sk√°n√≠ hodnot a, b, c na jednom ≈ô√°dku oddƒõlen√Ωch mezerou
a, b, c = map(float, input("Zadejte hodnoty a, b, c oddƒõlen√© mezerou: ").split())

def kvadraticka_rovnice(a, b, c):
    # O≈°et≈ôen√≠, zda a nen√≠ rovno nule
    if a == 0:
        print("Kvadratick√° rovnice nen√≠ definov√°na pro a = 0.")
        return

    # V√Ωpoƒçet diskriminantu
    D = b**2 - 4*a*c

    if D > 0:
        x_1 = (-b + sqrt(D))/(2*a)
        x_2 = (-b - sqrt(D))/(2*a)
        if x_1 > x_2:
            print(f"Prvn√≠ ko≈ôen je {x_2} a druh√Ω ko≈ôen je {x_1}")
        if x_2 > x_1:
            print(f"Prvn√≠ ko≈ôen je {x_1} a druh√Ω ko≈ôen je {x_2}")

    elif D == 0:
        x_1 = -b / (2*a)
        print(f"Jedin√Ω ko≈ôen je {x_1}")

    else:
        print("Kvadratick√° rovnice nem√° re√°ln√° ≈ôe≈°en√≠.")
        real_part = -b / (2*a)
        imaginary_part = sqrt(-D) / (2*a)
        x_1 = complex(real_part, imaginary_part)
        x_2 = complex(real_part, -imaginary_part)

        return print(f"Prvni koren: {x_1} a druhy koren: {x_2}")
        


kvadraticka_rovnice(a, b, c)



